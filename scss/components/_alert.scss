//--------------------------------------------------
// CONFIGURATION
//--------------------------------------------------

//---------- Config: Via SCSS Maps
$shilp-alert-defaults: () !default;
$shilp-alert-defaults: map-merge(
  (
    "colors": shilp-color-names(),
    "styles": (
      solid,
      outline,
      muted
    ),
    "sizes": $shilp-spaces
  ),
  $shilp-alert-defaults
);

//---------- Config: Via CSS Vars
$shilp-alert-vars: () !default;
$shilp-alert-vars: map-merge(
  (
    "bg": transparent,
    "color": #000000,
    "border": 0px,
    "border-color": transparent,
    "size": #{map-deep-get($shilp-alert-defaults, sizes, xs)}
  ),
  $shilp-alert-vars
);

//---------- Local Variables
$alert-colors: map-get($shilp-alert-defaults, "colors");
$alert-sizes: map-get($shilp-alert-defaults, "sizes");
$alert-styles: map-get($shilp-alert-defaults, "styles");

//--------------------------------------------------
// MIXINS
//--------------------------------------------------

// STYLE
@mixin alert--style($color, $style) {
  @if ($style== "solid") {
    --alert--bg: #{--color($color)};
    --alert--color: #{--color(light)};
  } //
  @else if($style== "outline") {
    --alert--bg: #{--color($color, lightest)};
    --alert--border-color: #{--color($color, lighter)};
    --alert--color: #{--color($color, darker)};
    --alert--border: 1px;
  } //
  @else if($style== "muted") {
    --alert--bg: #{--color($color, lightest)};
    --alert--color: #{--color($color)};
  } //
  @else if($style== "gradient") {
    background: create-gradient($color);
    --alert--color: #{--color($color)};
  }
}

//--------------------------------------------------
// CSS BLOCK & ELEMENTS
//--------------------------------------------------

.alert {
  @include component-vars("alert", $shilp-alert-vars);
  display: inline-flex;
  background-color: var(--alert--bg);
  color: var(--alert--color);
  border: var(--alert--border) solid var(--alert--border-color);
  padding: calc(var(--alert--size) * 0.67) var(--alert--size);
}
.alert__body {
  margin: 0;
}
.alert__icon {
  margin-right: --space(1);
}

//--------------------------------------------------
// MODIFIERS
//--------------------------------------------------

.alert--fluid {
  display: flex;
}

// COLOR
@each $color in $alert-colors {
  .alert--#{$color} {
    @include alert--style($color, "solid");
  }
}

// SIZE
@each $size, $value in $alert-sizes {
  .alert--#{$size} {
    --alert--size: #{$value};
  }
}

// STYLE
@each $color in $alert-colors {
  @each $style in $alert-styles {
    .alert--#{$color}.alert--#{$style} {
      @include alert--style($color, $style);
    }
  }
}

.alert--rectangle {
  border-radius: 0;
}
.alert--rounded {
  border-radius: --radius(sm);
}
.alert--pill {
  border-radius: 9999px;
}
