//--------------------------------------------------
// CONFIGURATION
//--------------------------------------------------

//---------- Config: Via SCSS Maps
$shilp-alert-defaults: () !default;
$shilp-alert-defaults: map-merge(("colors": shilp-color-names(),
    "themes": (solid,
      outline,
      muted,
    ),
  ),
  $shilp-alert-defaults);

//---------- Config: Via CSS Vars
$shilp-alert-vars: () !default;
$shilp-alert-vars: map-merge(("bg": transparent,
    "color": #000000,
    "border": 0px,
    "border-color": transparent,
    "padding": #{--space(3)},
    "radius": map-get($shilp-config, "radius"),
  ),
  $shilp-alert-vars);

//---------- Local Variables
$alert-colors: map-get($shilp-alert-defaults, "colors");
$alert-themes: map-get($shilp-alert-defaults, "themes");

//--------------------------------------------------
// MIXINS
//--------------------------------------------------

// THEME
@mixin alert--theme($color, $theme) {
  @if ($theme=="solid") {
    --alert--bg: #{--color($color)};
    --alert--color: #{--color(light)};
    --alert--body-color: #{--color($color,lightest)};
  }

  //
  @else if($theme=="outline") {
    --alert--bg: #{--color(light)};
    --alert--border-color: #{--color($color, lighter)};
    --alert--color: #{--color($color, darker)};
    --alert--border: 1px;
    --alert--body-color: #{--color($color,darker)};
  }

  //
  @else if($theme=="muted") {
    --alert--bg: #{--color($color, lightest)};
    --alert--color: #{--color($color)};
    --alert--body-color: #{--color($color)};
  }

  //
  @else if($theme=="gradient") {
    background: create-gradient($color);
    --alert--color: #{--color($color)};
    --alert--body-color: #{--color(light)};
  }
}

//--------------------------------------------------
// CSS BLOCK & ELEMENTS
//--------------------------------------------------

.alert {
  @include component-vars("alert", $shilp-alert-vars);
  display: inline-grid;
  background-color: var(--alert--bg);
  color: var(--alert--color);
  border: var(--alert--border) solid var(--alert--border-color);
  padding: var(--alert--padding);
  border-radius: var(--alert--radius);
  grid-template-columns: min-content auto;
}

.alert__message {
  font-size: --text(md);
}

.alert__body {
  color: var(--alert--body-color);
  grid-row: 2 / 3;
  grid-column: 1 / 3;
}

//--------------------------------------------------
// MODIFIERS
//--------------------------------------------------

.alert--fluid {
  display: grid;
}

// COLOR
@each $color in $alert-colors {
  .alert--#{$color} {
    @include alert--theme($color, "solid");
  }
}

// theme
@each $color in $alert-colors {
  @each $theme in $alert-themes {
    .alert--#{$color}.alert--#{$theme} {
      @include alert--theme($color, $theme);
    }
  }
}

.alert--rectangle {
  border-radius: 0;
}

.alert--rounded {
  border-radius: --radius(3);
}

.alert--pill {
  border-radius: 9999px;
}