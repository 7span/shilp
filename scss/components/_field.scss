//--------------------------------------------------
// TODO:
// Change 'after' & 'before' to prefix and suffix
//--------------------------------------------------
//--------------------------------------------------
// CONFIGURATION
//--------------------------------------------------

//---------- Config: Via SCSS Maps
$shilp-field-defaults: () !default;
$shilp-field-defaults: map-merge(
  (
    "states": (
      danger,
      warning,
      success,
      info,
    ),
  ),
  $shilp-field-defaults
);

//---------- Config: Via CSS Vars
$shilp-field-vars: () !default;
$shilp-field-vars: map-merge(
  (
    "radius": 4px,
    "border-width": 0px,
    "border-color": --color(grey, light),
    "optional-text": '"â€” Optional"',
    "circum-color": --color(grey),
    "circum-bg": --color(grey, lightest),
    "focus-color": --color(grey, lightest),
    "size": --field(md),
    "text-size": --field-text(md),
    "icon-size": --field-icon(md),
  ),
  $shilp-field-vars
);

//---------- Local Variables
$field-states: map-get($shilp-field-defaults, "states");

//--------------------------------------------------
// MIXINS
//--------------------------------------------------

//--------------------------------------------------
// CSS BLOCK & ELEMENTS
//--------------------------------------------------

// FIELD
.field {
  @include component-vars("field", $shilp-field-vars);
  position: relative;
  .material-design-icon {
    display: flex;
  }
}

.field__label {
  display: flex;
  margin-bottom: 4px;
  color: --color(grey, dark);
  align-items: center;
}

.field__desc {
  display: flex;
  margin-top: --space(2);
  color: --color(grey);
}

.field__message {
  color: var(--field--border-color);
}

//THE BLOCK CONTAINING INPUT
.field-block {
  @include field-defaults;
  border: var(--field--border-width) solid var(--field--border-color);
  border-radius: var(--field--radius);
  min-width: 0px; //When .field__group is used, the input becomes flex child.
  font-size: var(--field--text-size);
  overflow: hidden;
  background-color: var(--field--circum-bg);
  > * {
    font-size: var(--field--text-size);
  }
  &:not(textarea) {
    height: var(--field--size);
    line-height: var(--field--size);
  }
  &:focus {
    box-shadow: inset 0 0 0 3px var(--field--focus-color);
    position: relative;
  }
  &:disabled {
    color: --color(grey);
    background-color: --color(grey, lightest);
  }
}

textarea.field-block {
  padding: --space(2);
  overflow: auto;
}

//Content ITEMS
.field__content {
  display: flex;
  align-items: stretch;
  > * {
    border-radius: 0;
    &:first-child {
      border-radius: var(--field--radius) 0 0 var(--field--radius);
    }
    &:last-child {
      border-radius: 0 var(--field--radius) var(--field--radius) 0;
    }
    &:only-child {
      border-radius: var(--field--radius);
      flex: 1 1 auto;
    }
  }
  > .field {
    + .field {
      margin-top: 0;
    }
  }
}

// BEFORE & AFTER
.field__before,
.field__after {
  flex: 0 0 auto;
  min-width: var(--field--size);
  border: var(--field--border-width) solid var(--field--border-color);
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 0px --space(2);
  background-color: var(--field--circum-bg);
  color: var(--field--circum-color);
}
.field__before {
  border-right: none;
}
.field__after {
  border-left: none;
}

.field__icon {
  svg {
    height: var(--field--icon-size) !important;
    width: var(--field--icon-size) !important;
  }
}

//--------------------------------------------------
// MODIFIERS
//--------------------------------------------------

//---------- SIZE
@each $key, $value in $shilp-field-sizes {
  .field--#{$key} {
    --field--size: #{--field($key)};
    --field--text-size: #{--field-text($key)};
    --field--icon-size: #{--field-icon($key)};
  }
}

.field--inline {
  display: grid;
  grid-template-rows: 1fr min-content;
  grid-template-columns: 1fr min-content;
  .field__label {
    margin: 0;
  }
  .field__content {
    justify-content: flex-end;
  }
  .field__desc {
    grid-column: 1 / 3;
  }
}

.field--auto {
  --field--size: auto;
}

//---------- STATES
@each $state in $field-states {
  .field--#{$state} {
    --field--border-color: #{--color($state)};
    --field--circum-bg: #{--color($state, lightest)};
    --field--circum-color: #{--color($state, darker)};
    --field--focus-color: #{--color($state, lightest)};
  }
}

//---------- OPTIONAL
.field--optional {
  > label {
    &:after {
      content: var(--field--optional-text);
      font-style: italic;
      margin-left: --space(1);
      color: --color(grey);
      font-size: 11px;
    }
  }
}

//---------- VIEW
.field-block--view {
  padding-left: 0;
  padding-right: 0;
  border: none;
  > * {
    margin: 0;
  }
}

//--------------------------------------------------
// THEMES
//--------------------------------------------------
.field--underline,
.field-group--underline .field {
  --field--radius: 0;
  --field--circum-bg: --color(light);
  .field__before,
  .field__after,
  .field-block:not(textarea) {
    border-top: none;
    border-left: none;
    border-right: none;
  }
}

.field--outline,
.field-group--outline .field {
  --field--border-width: 1px;
  --field--circum-bg: transparent;
}
