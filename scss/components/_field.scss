//--------------------------------------------------
// CONFIGURATION
//--------------------------------------------------

//---------- Config: Via SCSS Maps
$shilp-field-defaults: () !default;
$shilp-field-defaults: map-merge(
  (
    "size": "md",
    "states": (
      danger,
      warning,
      success,
      info
    )
  ),
  $shilp-field-defaults
);

//---------- Config: Via CSS Vars
$shilp-field-vars: () !default;
$shilp-field-vars: map-merge(
  (
    "radius": 3px,
    "border-width": 1px,
    "border-color": --color(grey, light),
    "optional-text": '"(Optional)"'
  ),
  $shilp-field-vars
);

//---------- Local Variables
$field-radius: var(--field--radius);
$field-border-width: var(--field--border-width);
$field-border-color: var(--field--border-color);
$field-optional-text: var(--field--optional-text);

$field-size: map-get($shilp-field-defaults, "size");
$field-states: map-get($shilp-field-defaults, "states");
$field-sizes: $shilp-input-sizes;

//--------------------------------------------------
// MIXINS
//--------------------------------------------------

//---------- SIZE
// Generates the size based on $shilp-input-sizes map
@mixin field-size($size) {
  --field--size: #{--input-size($size)};
  --field--font-size: #{map-get($shilp-input-font-sizes, $size)};
  --field--icon-size: #{map-get($shilp-input-icon-sizes, $size)};
}

//--------------------------------------------------
// CSS BLOCK & ELEMENTS
//--------------------------------------------------

// FIELD
.field {
  @include component-vars("field", $shilp-field-vars);
  @include field-size($field-size);
  margin-bottom: --space(md);

  .field {
    margin-bottom: 0;
  }

  > label {
    display: flex;
    margin-bottom: 4px;
    color: --color(grey, dark);
    align-items: center;
  }

  > small {
    display: flex;
    margin-top: 4px;
    color: --color(grey);
  }
}

//THE BLOCK CONTAINING INPUT
.field-block {
  @include field-defaults;
  border: $field-border-width solid $field-border-color;
  border-radius: $field-radius;
  min-width: 0px; //When .field__group is used, the input becomes flex child.
  font-size: var(--field--font-size);
  > * {
    font-size: var(--field--font-size);
  }
  &:not(textarea) {
    height: var(--field--size);
    line-height: var(--field--size);
  }
  &:focus {
    box-shadow: inset 0 0 0 3px --color(grey, lightest);
    position: relative;
  }
  &:disabled {
    color: --color(grey);
    background-color: --color(grey, lightest);
  }
}

textarea.field-block {
  padding: --space(xs);
}

//GROUP ITEMS
.field__group {
  display: flex;
  align-items: stretch;
  > * {
    border-radius: 0;
    &:first-child {
      border-radius: $field-radius 0 0 $field-radius;
    }
    &:last-child {
      border-radius: 0 $field-radius $field-radius 0;
    }
    &:only-child {
      border-radius: $field-radius;
    }
  }
  > .field {
    + .field {
      margin-top: 0;
    }
  }
}

// BEFORE & AFTER
.field__before,
.field__after {
  flex: 0 0 auto;
  min-width: var(--field--size);
  border: $field-border-width solid $field-border-color;
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 0px --space(xs);
  background-color: --color(grey, lighter);
  color: --color(grey, dark);
}
.field__before {
  border-right: none;
}
.field__after {
  border-left: none;
}

.field__icon {
  svg {
    height: var(--field--icon-size) !important;
    width: var(--field--icon-size) !important;
  }
}

//--------------------------------------------------
// MODIFIERS
//--------------------------------------------------

//---------- SIZE
@each $size, $value in $field-sizes {
  .field--#{$size} {
    @include field-size($size);
  }
}

//---------- STATES
@each $state in $field-states {
  .field--#{$state} {
    //Input, Select, Textarea
    .field-block {
      border-color: --color($state);
      &:focus {
        box-shadow: inset 0 0 0 3px --color($state, lightest);
      }
    }
    .field__before,
    .field__after {
      border-color: --color($state);
      background-color: --color($state, lightest);
      color: --color($state, darker);
    }
    .field__danger {
      color: --color($state);
    }
  }
}

//---------- OPTIONAL
.field--optional {
  > label {
    &:after {
      content: $field-optional-text;
      font-style: italic;
      margin-left: --space(xs);
      font-size: --font-size(h6);
      color: --color(grey);
    }
  }
}

//---------- VIEW
.field-block--view {
  padding-left: 0;
  padding-right: 0;
  border: none;
  > * {
    margin: 0;
  }
}
