//--------------------------------------------------
// CONFIGURATION
//--------------------------------------------------

//---------- Config: Via SCSS Maps
$shilp-button-defaults: () !default;
$shilp-button-defaults: map-merge(
  (
    "colors": shilp-colors(),
    "styles": (
      trn,
      solid,
      outline,
      muted,
      gradient,
      tab
    ),
    "style": "solid",
    "shape": "rounded",
    "size": "md",
    "muted-shade": "lightest",
    "hover-shade": "darker"
  ),
  $shilp-button-defaults
);

//---------- Config: Via CSS Vars
$shilp-button-vars: () !default;
$shilp-button-vars: map-merge(
  (
    "outline": 1px
  ),
  $shilp-button-vars
);

//---------- Local Variables
$button-shapes: (rectangle, square, rounded, pill, circle);
$button-sizes: $shilp-input-sizes;
$button-colors: map-get($shilp-button-defaults, "colors");
$button-styles: map-get($shilp-button-defaults, "styles");
$button-hover-shade: map-get($shilp-button-defaults, "hover-shade");
$button-muted-shade: map-get($shilp-button-defaults, "muted-shade");
$default-button-shape: map-get($shilp-button-defaults, "shape");
$default-button-size: map-get($shilp-button-defaults, "size");
$default-button-style: map-get($shilp-button-defaults, "style");
$default-button-outline: var(--button--outline);

//--------------------------------------------------
// FUNCTIONS
//--------------------------------------------------
// DEFINES COLORS
// Defines the colors to use in diffrent shade based on provided color.
// Specially useful in light and dark shades.
@function define-colors($color) {
  $default: --color($color);
  $text: --text-color($color, dark);
  $hover: --color($color, $button-hover-shade);
  $muted: --color($color, $button-muted-shade);
  @return (default: $default, hover: $hover, text: $text, muted: $muted);
}

//--------------------------------------------------
// MIXINS
//--------------------------------------------------

//---------- STYLES
// Each style has unique CSS rules hence requires seperate mixins.
// naming convention is: button-style--<style_name>

//---------- STYLE: SOLID
@mixin button-style--solid($color) {
  $colors: define-colors($color);

  background-color: map-get($colors, default);
  color: map-get($colors, text);
  path {
    fill: map-get($colors, text);
  }
  &:hover:not(:disabled) {
    background-color: map-get($colors, hover);
  }
}

//---------- STYLE: OUTLINE
@mixin button-style--outline($color) {
  $colors: define-colors($color);

  border: $default-button-outline solid map-get($colors, default);
  background-color: transparent;
  color: map-get($colors, default);
  path {
    fill: map-get($colors, default);
  }
  &:hover:not(:disabled) {
    background-color: map-get($colors, muted);
  }
}

//---------- STYLE: MUTED
@mixin button-style--muted($color) {
  $colors: define-colors($color);
  background-color: map-get($colors, muted);
  color: map-get($colors, default);
  path {
    fill: map-get($colors, default);
  }
  &:hover:not(:disabled) {
    background-color: map-get($colors, default);
    color: map-get($colors, text);
    path {
      fill: map-get($colors, text);
    }
  }
}

//---------- STYLE: TRANSPARENT
@mixin button-style--trn($color) {
  $colors: define-colors($color);

  background-color: transparent;
  color: map-get($colors, default);
  path {
    fill: map-get($colors, default);
  }
  &:hover:not(:disabled) {
    background-color: transparent;
    color: map-get($colors, hover);
    path {
      fill: map-get($colors, hover);
    }
  }
}

//---------- STYLE: GRADIENT
@mixin button-style--gradient($color) {
  @if (map-has-key($shilp-gradients, $color)) {
    background: gradient($color);
  }
}

//---------- STYLE: TAB
@mixin button-style--tab($color) {
  $colors: define-colors($color);
  &.button--active {
    path {
      fill: map-get($colors, default);
    }
    &:after {
      background-color: map-get($colors, default);
    }
  }
}

//---------- STYLE: SWITCHER
@mixin button-style($style, $color) {
  @if $style== "solid" {
    @include button-style--solid($color);
  } //
  @else if $style== "outline" {
    @include button-style--outline($color);
  } //
  @else if $style== "muted" {
    @include button-style--muted($color);
  } //
  @else if $style== "trn" {
    @include button-style--trn($color);
  } //
  @else if $style== "gradient" {
    @include button-style--gradient($color);
    @if mixin-exists(extend--button-style--gradient) {
      @include extend--button-style--gradient();
    }
  } //
  @else if $style== "tab" {
    @include button-style--tab($color);
  }
}

//---------- SHAPES
//---------- SHAPE: SQUARE
@mixin button-shape--square($size) {
  height: --input-size($size);
  width: --input-size($size);
}

//---------- SHAPE: CIRCLE
@mixin button-shape--circle($size) {
  height: --input-size($size);
  width: --input-size($size);
}

//---------- SHAPE: SWITCHER
@mixin button-shape($shape, $size) {
  @if $shape== "square" {
    @include button-shape--square($size);
  } //
  @else if $shape== "circle" {
    @include button-shape--circle($size);
  } //
}

//----------  SIZES
@mixin button-size($size) {
  padding: 0px --space($size);
  height: --input-size($size);
  font-size: map-get($shilp-input-font-sizes, $size);
  .button__icon {
    svg {
      height: map-get($shilp-input-icon-sizes, $size) !important;
      width: map-get($shilp-input-icon-sizes, $size) !important;
    }
  }
}

//--------------------------------------------------
// CSS BLOCK & ELEMENTS
//--------------------------------------------------
.button {
  @include component-vars("button", $shilp-button-vars);
  @include button--reset;
  display: inline-flex;
  align-items: center;
  white-space: nowrap;
  font-family: --font-family(content);
  text-decoration: none;
  line-height: 1;
  justify-content: center;
  vertical-align: top;
  &:hover {
    text-decoration: none;
  }
  &:disabled {
    cursor: not-allowed;
    opacity: 0.8;
  }

  // Include default button size
  @include button-size($default-button-size);

  //TODO: Make this better!
  @if ($default-button-shape== "rounded") {
    border-radius: 4px;
  }

  // Button in loading state
  &.loader {
    span,
    .button__icon {
      visibility: hidden;
    }
  }
}

.button__icon {
  display: flex;
  justify-content: center;
  align-items: center;
  margin-right: --space(xs);
}

//--------------------------------------------------
// MODIFIERS
//--------------------------------------------------
.button--fluid {
  width: 100%;
}
// ALIGNMENT CLASSES
.button--left {
  justify-content: flex-start;
  .button__icon {
    margin-right: --space(xs);
  }
}
.button--right {
  flex-direction: row-reverse;
  justify-content: space-between;
  .button__icon {
    margin-left: --space(xs);
    margin-right: 0;
  }
}

//----------  COLORS
// Generates classes for button colors.
// Uses default style value.
@each $color, $value in $button-colors {
  .button--#{$color} {
    @include button-style($default-button-style, $color);
  }
}

//----------  STYLE & COLOR CLASSES
// Generates classes for button styles & colors.
@each $style in $button-styles {
  @each $color, $value in $shilp-colors {
    .button--#{$color}.button--#{$style} {
      @include button-style($style, $color);
    }
  }
}
//---------- STYLE: TAB
// Default Rules
@if (index($button-styles, "tab")) {
  .button--tab {
    position: relative;
    &:after {
      content: "";
      @include position(absolute, auto, 0, 0, 0);
      height: 2px;
    }
    color: --color(grey);
    background-color: transparent;
    path {
      fill: --color(grey, light);
    }
    &:hover:not(:disabled) {
      background-color: transparent;
      &:not(.button--active):after {
        background-color: --color(grey, lighter);
      }
    }
    &.button--active {
      color: --color(black);
    }
  }
}

//----------  SHAPES
// Generates classes for button shapes.
// Users default size value.
@each $shape in $button-shapes {
  @if mixin-exists(button-shape--#{$shape}) {
    .button--#{$shape} {
      @include button-shape($shape, $default-button-size);
    }
  }
}
// Default styles
.button--square,
.button--circle {
  padding: 0 !important;
  justify-content: center;
  .button__icon {
    margin: 0;
  }
}

.button--rectangle {
  border-radius: 0;
}
.button--rounded {
  border-radius: 4px;
}
.button--pill {
  border-radius: 9999px;
}

// SIZE CLASSES
// Generates classes for button sizes.
// Users default size value.
@each $size, $value in $button-sizes {
  .button--#{$size} {
    @include button-size($size);
  }
}

// SIZE & SHAPE CLASEES
@each $shape in $button-shapes {
  //These shapes do not depend on sizes
  @if ($shape!= "rectangle" and $shape!= "rounded") {
    @each $size, $value in $button-sizes {
      .button--#{$shape}.button--#{$size} {
        @include button-shape($shape, $size);
      }
    }
  }
}
