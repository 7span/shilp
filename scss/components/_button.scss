//--------------------------------------------------
// CONFIGURATION
//--------------------------------------------------

//---------- Config: Via SCSS Maps
$shilp-button-defaults: () !default;
$shilp-button-defaults: map-merge(
  (
    "colors": shilp-color-names(),
    "paddings": $shilp-spaces,
    "styles": (
      trn,
      solid,
      outline,
      muted,
      gradient,
      tab
    ),
    "style": "solid",
    "shape": "rounded",
    "muted-shade": "lightest",
    "hover-shade": "darker"
  ),
  $shilp-button-defaults
);

//---------- Config: Via CSS Vars
$shilp-button-vars: () !default;
$shilp-button-vars: map-merge(
  (
    "bg": transparent,
    "color": --color(dark),
    "hover-bg": transparent,
    "hover-color": --color(dark),
    "border": 0px,
    "size": --field(md),
    "font-size": --field-text(md),
    "icon-size": #{map-get($shilp-field-icon-sizes, md)},
    "padding": #{map-deep-get($shilp-button-defaults, paddings, md)}
  ),
  $shilp-button-vars
);

//---------- Local Variables
$button-shapes: (rectangle, square, rounded, pill, circle);
$button-colors: map-get($shilp-button-defaults, "colors");
$button-styles: map-get($shilp-button-defaults, "styles");
$button-paddings: map-get($shilp-button-defaults, "paddings");
$button-hover-shade: map-get($shilp-button-defaults, "hover-shade");
$button-muted-shade: map-get($shilp-button-defaults, "muted-shade");
$default-button-shape: map-get($shilp-button-defaults, "shape");
$default-button-style: map-get($shilp-button-defaults, "style");

//--------------------------------------------------
// FUNCTIONS
//--------------------------------------------------

//--------------------------------------------------
// MIXINS
//--------------------------------------------------

//---------- STYLE: SWITCHER
@mixin button-style($style, $color) {
  $default: --color($color);
  $text: "";
  $hover: "";
  $muted: "";

  @if ($color== "light" or $color== "dark") {
    $hover: --color($color);
    $muted: --color($color);
  } @else {
    $hover: --color($color, $button-hover-shade);
    $muted: --color($color, $button-muted-shade);
  }

  @if ($color== "light") {
    $text: --color(dark);
  } @else {
    $text: --color(light);
  }

  //---------- SOLID
  @if $style== "solid" {
    --button--bg: #{$default};
    --button--color: #{$text};
    --button--hover-color: #{$text};
    --button--hover-bg: #{$hover};
  }
  //---------- OUTLINE
  @else if $style== "outline" {
    --button--color: #{$default};
    --button--hover-color: #{$default};
    --button--hover-bg: #{$muted};
  }
  //---------- MUTED
  @else if $style== "muted" {
    --button--bg: #{$muted};
    --button--color: #{$default};
    --button--hover-color: #{$text};
  }
  //----------  TRANSPARENT
  @else if $style== "trn" {
    --button--color: #{$default};
    --button--hover-color: #{$hover};
    --button--bg: transparent;
    --button--hover-bg: transparent;
  }
  //---------- GRADIENT
  @else if $style== "gradient" {
    background: create-gradient($color);
  }
  //----------  TAB
  @else if $style== "tab" {
    &.button--active {
      --button--color: #{$default};
      --button--hover-color: #{$default};
      --button--bg: #{$default};
      --button--hover-bg: #{$default};
    }
  }
}

//--------------------------------------------------
// CSS BLOCK & ELEMENTS
//--------------------------------------------------
.button {
  @include component-vars("button", $shilp-button-vars);
  @include button--reset;
  display: inline-flex;
  align-items: center;
  white-space: nowrap;
  font-family: --text(content);
  text-decoration: none;
  line-height: 1;
  justify-content: center;
  vertical-align: top;
  background-color: var(--button--bg);
  color: var(--button--color);
  border: var(--button--border) solid var(--button--color);
  height: var(--button--size);
  padding: 0px var(--button--padding);
  font-size: var(--button--font-size);
  svg {
    height: var(--button--icon-size) !important;
    width: var(--button--icon-size) !important;
  }
  path {
    fill: currentColor;
  }

  &:hover {
    text-decoration: none;
    &:not(:disabled) {
      color: var(--button--hover-color);
      background-color: var(--button--hover-bg);
    }
  }

  &:disabled {
    cursor: not-allowed;
    opacity: 0.8;
  }

  //TODO: Make this better!
  @if ($default-button-shape== "rounded") {
    border-radius: 4px;
  }

  // Button in loading state
  &.loader {
    span,
    .button__icon {
      visibility: hidden;
    }
  }
}

.button__icon {
  display: flex;
  justify-content: center;
  align-items: center;
  margin-right: --space(xs);
}

//--------------------------------------------------
// MODIFIERS
//--------------------------------------------------
.button--fluid {
  width: 100% !important;
}

//----------  ALIGNMENTS
.button--left {
  justify-content: flex-start;
  .button__icon {
    margin-right: --space(xs);
  }
}
.button--right {
  flex-direction: row-reverse;
  justify-content: space-between;
  .button__icon {
    margin-left: --space(xs);
    margin-right: 0;
  }
}

//----------  COLORS
// Generates classes for button colors.
// Uses default style value.
@each $color, $value in $button-colors {
  .button--#{$color} {
    @include button-style($default-button-style, $color);
  }
}

//----------  STYLE & COLOR CLASSES
// Generates classes for button styles & colors.
@each $style in $button-styles {
  @each $color, $value in $shilp-colors {
    .button--#{$color}.button--#{$style} {
      @include button-style($style, $color);
    }
  }
}

//---------- STYLES

//OUTLINE
.button--outline {
  --button--border: 1px;
  --button--bg: transparent;
}

//TAB
.button--tab {
  --button--color: #{--color(grey)};
  --button--hover-color: #{--color(grey)};
  --button--bg: #{--color(grey, lighter)};
  --button--hover-bg: #{--color(grey, lighter)};
  position: relative;
  background-color: transparent;
  color: var(--button--color);
  &:after {
    content: "";
    @include position(absolute, auto, 0, 0, 0);
    height: 2px;
    background-color: var(--button--bg);
    display: none;
  }
  &:hover:not(:disabled) {
    background-color: transparent;
    --button--hover-color: #{--color(primary)};
  }
  &.button--active {
    --button--color: #{--color(primary)};
    --button--hover-color: #{--color(primary)};
    background: transparent;
    &:after {
      display: block;
    }
  }
}

//----------  SHAPES
.button--square,
.button--circle {
  padding: 0 !important;
  justify-content: center;
  width: var(--button--size);
  .button__icon {
    margin: 0;
  }
}
.button--circle {
  border-radius: 50%;
}

.button--rectangle {
  border-radius: 0;
}
.button--rounded {
  border-radius: 4px;
}
.button--pill {
  border-radius: 9999px;
}

//----------  SIZES
@each $key, $value in $shilp-field-sizes {
  .button--#{$key} {
    --button--size: #{--field($key)};
    --button--font-size: #{--field-text($key)};
    --button--icon-size: #{map-get($shilp-field-icon-sizes, $key)};
    --button--padding: #{map-get($button-paddings, $key)};
  }
}
