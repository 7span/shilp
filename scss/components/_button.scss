//--------------------------------------------------
// CONFIGURATION
//--------------------------------------------------

//---------- Config: Via SCSS Maps
$shilp-button-defaults: () !default;
$shilp-button-defaults: map-merge(
  (
    "colors": shilp-color-names(),
    "themes": (
      trn,
      solid,
      outline,
      muted,
      gradient,
      tab,
      link,
    ),
    "theme": "solid",
    "hover-shade": "darker",
  ),
  $shilp-button-defaults
);

//---------- Config: Via CSS Vars
$shilp-button-vars: () !default;
$shilp-button-vars: map-merge(
  (
    "bg": transparent,
    "color": --color(dark),
    "hover-bg": transparent,
    "hover-color": --color(dark),
    "border": 0px,
    "size": --field(md),
    "font-size": --field-text(md),
    "icon-size": --field-icon(md),
    "radius": map-get($shilp-config, "radius"),
    "tab-border-size": 2px,
  ),
  $shilp-button-vars
);

//---------- Local Variables
$button-colors: map-get($shilp-button-defaults, "colors");
$button-themes: map-get($shilp-button-defaults, "themes");
$button-hover-shade: map-get($shilp-button-defaults, "hover-shade");
$button-muted-shade: map-get($shilp-button-defaults, "muted-shade");
$default-button-theme: map-get($shilp-button-defaults, "theme");
$default-button-radius: map-get($shilp-button-defaults, "radius");

//--------------------------------------------------
// FUNCTIONS
//--------------------------------------------------

//--------------------------------------------------
// MIXINS
//--------------------------------------------------

//---------- THEME: SWITCHER
@mixin button-theme($theme, $color) {
  $default: --color($color);
  $text: "";
  $hover: "";

  @if ($color== "light" or $color== "dark") {
    $hover: --color($color);
  } @else {
    $hover: --color($color, $button-hover-shade);
  }

  @if ($color== "light") {
    $text: --color(dark);
  } @else {
    $text: --color(light);
  }

  //---------- SOLID
  @if $theme== "solid" {
    --button--bg: #{$default};
    --button--color: #{$text};
    --button--hover-color: #{$text};
    --button--hover-bg: #{$hover};
  }
  //---------- OUTLINE
  @else if $theme== "outline" {
    --button--color: #{$default};
    --button--hover-color: #{$default};
    --button--hover-bg: #{--color($color, "lightest")};
  }
  //---------- MUTED
  @else if $theme== "muted" {
    --button--bg: #{--color($color, "lightest")};
    --button--hover-bg: #{--color($color, "lightest")};
    --button--color: #{--color($color)};
    --button--hover-color: #{--color($color, "darkest")};
  }
  //----------  TRANSPARENT
  @else if $theme== "trn" {
    --button--color: #{$default};
    --button--hover-color: #{$hover};
    --button--bg: transparent;
    --button--hover-bg: transparent;
  }
  //---------- LINK
  @else if $theme== "link" {
    --button--color: #{$default};
    --button--hover-color: #{$hover};
    --button--bg: transparent;
    --button--hover-bg: transparent;
    padding: 0;
    height: auto;
  }
  //---------- GRADIENT
  @else if $theme== "gradient" {
    background: create-gradient($color);
  }
  //----------  TAB
  @else if $theme== "tab" {
    &.button--active {
      --button--color: #{$default};
      --button--hover-color: #{$default};
      --button--bg: #{$default};
      --button--hover-bg: #{$default};
    }
  }
}

//--------------------------------------------------
// CSS BLOCK & ELEMENTS
//--------------------------------------------------
.button,
.button-group {
  @include component-vars("button", $shilp-button-vars);
}
.button {
  @include button--reset;
  display: inline-flex;
  align-items: center;
  white-space: nowrap;
  font-family: --text(content);
  text-decoration: none;
  line-height: 1;
  justify-content: center;
  background-color: var(--button--bg);
  color: var(--button--color);
  border: var(--button--border) solid var(--button--color);
  height: var(--button--size);
  padding: 0px calc(var(--button--size) / 2);
  font-size: var(--button--font-size);
  border-radius: var(--button--radius);
  position: relative;
  svg {
    height: var(--button--icon-size) !important;
    width: var(--button--icon-size) !important;
  }
  path {
    fill: currentColor;
  }

  &:hover {
    text-decoration: none;
    &:not(:disabled) {
      color: var(--button--hover-color);
      background-color: var(--button--hover-bg);
    }
  }

  &:disabled {
    cursor: not-allowed;
    opacity: 0.8;
  }

  // Button in loading state
  &.loader {
    span,
    .button__icon {
      visibility: hidden;
    }
  }
}

.button__icon {
  display: flex;
  justify-content: center;
  align-items: center;
  ~ .button__label {
    @include margin(left, --space(2));
  }
}
.button__emoji {
  font-family: --text(emoji);
}
//--------------------------------------------------
// MODIFIERS
//--------------------------------------------------
.button--fluid {
  display: flex;
  width: 100%; //Flex sometimes doesn't occupy full width!
}

//----------  ALIGNMENTS
.button--left {
  justify-content: flex-start;
  .button__icon {
    ~ .button__label {
      @include margin(left, --space(2));
      @include margin(right, 0);
    }
  }
}
.button--right {
  flex-direction: row-reverse;
  justify-content: space-between;
  text-align: right;
  .button__icon {
    ~ .button__label {
      @include margin(right, --space(2));
      @include margin(left, 0);
    }
  }
}

//----------  COLORS
// Generates classes for button colors.
// Uses default theme value.
@each $color, $value in $button-colors {
  .button--#{$color} {
    @include button-theme($default-button-theme, $color);
  }
}

//----------  theme & COLOR CLASSES
// Generates classes for button themes & colors.
@each $theme in $button-themes {
  @each $color, $value in $shilp-colors {
    .button--#{$color}.button--#{$theme} {
      @include button-theme($theme, $color);
    }
  }
}

//----------  SIZES
@each $key, $value in $shilp-field-sizes {
  .button--#{$key} {
    --button--size: #{--field($key)};
    --button--font-size: #{--field-text($key)};
    --button--icon-size: #{map-get($shilp-field-icon-sizes, $key)};
  }
}

//---------- themes
//OUTLINE
.button--outline {
  --button--border: 1px;
  --button--bg: transparent;
}

//TAB
.button--tab {
  --button--color: #{--color(grey)};
  --button--hover-color: #{--color(grey)};
  --button--bg: #{--color(grey, lighter)};
  --button--hover-bg: #{--color(grey, lighter)};
  position: relative;
  background-color: transparent;
  color: var(--button--color);
  &:after {
    content: "";
    @include position(absolute, auto, 0, 0, 0);
    height: var(--button--tab-border-size);
    background-color: var(--button--color);
    display: none;
  }
  &:hover:not(:disabled) {
    background-color: transparent;
    --button--hover-color: #{--color(primary)};
  }
  &.button--active {
    --button--color: #{--color(primary)};
    --button--hover-color: #{--color(primary)};
    background: transparent;
    &:after {
      display: block;
    }
  }
}

//----------  SHAPES
.button--square,
.button--circle {
  padding: 0 !important;
  justify-content: center;
  width: var(--button--size);
}
.button--circle {
  --button--radius: 50%;
}
.button--pill {
  --button--radius: 9999px;
}
.button--rectangle {
  --button--radius: 0px;
}

.button--badge {
  pointer-events: none;
  vertical-align: top;
}

//Wrap
.button--wrap {
  word-break: break-word;
  white-space: initial;
  padding-top: calc(var(--button--size) / 3);
  padding-bottom: calc(var(--button--size) / 3);
  height: auto;
  line-height: initial;
}
