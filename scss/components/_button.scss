$styles-button-defaults: () !default;
$styles-button-defaults: map-merge(
  (
    "variants": (
      primary,
      secondary,
      accent,
      light,
      dark,
      info,
      success,
      danger,
      warning
    ),
    "styles": (
      solid,
      outline,
      muted
    ),
    "shapes": (
      rectangle,
      square,
      rounded,
      pill,
      circle
    ),
    "alignments": (
      left,
      right
    ),
    "variant": "primary",
    "style": "solid",
    "shape": "rounded",
    "size": "md",
    "outline": 1px,
    "icon-size": (
      xl: 28px,
      lg: 24px,
      md: 20px,
      sm: 16px
    )
  ),
  $styles-button-defaults
);

$button-shape: map-get($styles-button-defaults, "shape");
$button-variant: map-get($styles-button-defaults, "variant");
$button-size: map-get($styles-button-defaults, "size");
$button-style: map-get($styles-button-defaults, "style");
$button-outline: map-get($styles-button-defaults, "outline");
$button-icon-size: map-get($styles-button-defaults, "icon-size");

// The color map must contain "hover", "default", "muted", "text" values.
$button-variants: map-get($styles-button-defaults, "variants");
$button-styles: map-get($styles-button-defaults, "styles");
$button-shapes: map-get($styles-button-defaults, "shapes");
$button-alignments: map-get($styles-button-defaults, "alignments");

// STYLES
// Each style has unique CSS rules hence requires seperate mixins.
// naming convention is: button-style--<style_name>
@mixin button-style--solid($variant) {
  background-color: --color($variant);
  color: --text-color($variant);
  path {
    fill: --text-color($variant);
  }
  &:hover:not(:disabled) {
    background-color: --color($variant, hover);
  }
}

@mixin button-style--outline($variant) {
  border: $button-outline solid --color($variant);
  background-color: transparent;
  color: --color($variant);
  path {
    fill: --color($variant);
  }
  &:hover:not(:disabled) {
    background-color: --color($variant);
    color: --text-color($variant);
    path {
      fill: --text-color($variant);
    }
  }
}

@mixin button-style--muted($variant) {
  background-color: --color($variant, muted);
  color: --color($variant);
  path {
    fill: --color($variant);
  }
  &:hover {
    background-color: --color($variant, muted);
    color: --color($variant);
  }
}

@mixin button-style($style, $variant) {
  @if $style== "solid" {
    @include button-style--solid($variant);
  } //
  @else if $style== "outline" {
    @include button-style--outline($variant);
  } //
  @else if $style== "muted" {
    @include button-style--muted($variant);
  }
}

// SHAPES
@mixin button-shape--rectangle {
  border-radius: 0;
}
@mixin button-shape--rounded {
  border-radius: 4px;
}
@mixin button-shape--pill($size) {
  border-radius: --input-size($size);
}
@mixin button-shape--square($size) {
  height: --input-size($size);
  width: --input-size($size);
  padding: 0 !important;
  border-radius: 0;
  .button__icon {
    margin: 0;
  }
}
@mixin button-shape--circle($size) {
  height: --input-size($size);
  width: --input-size($size);
  padding: 0 !important;
  border-radius: 50%;
  .button__icon {
    margin: 0;
  }
}

@mixin button-shape($shape, $size) {
  @if $shape== "rectangle" {
    @include button-shape--rectangle;
  } //
  @else if $shape== "rounded" {
    @include button-shape--rounded;
  } //
  @else if $shape== "pill" {
    @include button-shape--pill($size);
  } //
  @else if $shape== "square" {
    @include button-shape--square($size);
  } //
  @else if $shape== "circle" {
    @include button-shape--circle($size);
  }
}

// SIZES
// Uses $styles-input-sizes map to define sizes
@mixin button-size($size) {
  padding: 0px --space($size);
  height: --input-size($size);
  .button__icon {
    svg {
      height: map-get($button-icon-size, $size) !important;
      width: map-get($button-icon-size, $size) !important;
    }
  }
}

// ALIGNMENT
@mixin button-alignment--left {
  padding-left: 0;
  .button__icon {
    justify-content: flex-end;
    margin-right: --space(xs);
  }
}
@mixin button-alignment--right {
  padding-right: 0;
  flex-direction: row-reverse;
  .button__icon {
    justify-content: flex-start;
    margin-left: --space(xs);
  }
}

@mixin button-alignment($alignment, $size) {
  .button__icon {
    width: --input-size($size);
  }
  @if $alignment== "left" {
    @include button-alignment--left;
  } //
  @else if $alignment== "right" {
    @include button-alignment--right;
  } //
}

// Default .button rules.
.button,
.button-group a,
.button-group button {
  @include button--reset;
  display: flex;
  align-items: center;
  white-space: nowrap;
  font-family: --font-family(content);
  text-decoration: none;
  font-size: 14px;
  line-height: 1;
  .button__icon {
    display: flex;
    justify-content: center;
    align-items: center;
    margin-right: --space(xs);
  }
  &:hover {
    text-decoration: none;
  }
  &:disabled {
    cursor: not-allowed;
    opacity: 0.8;
  }
  &.is-loading {
    cursor: wait;
  }
  &.is-fluid {
    width: 100%;
  }
  @if mixin-exists(__button) {
    @include __button();
  }
  @include button-size($button-size);
  @include button-shape($button-shape, $button-size);
  @include button-style($button-style, $button-variant);
}

.button-group {
  display: flex;
  list-style: none;
  margin: 0;
  padding: 0;
  a {
    flex: 0 0 auto;
  }
  &.is-stacked {
    flex-direction: column;
    button,
    a {
      width: 100%;
    }
  }
}

// STYLE CLASSES
// Generates classes for button styles.
// Uses default variant value.
@each $style in $button-styles {
  .button-group.is-#{$style} a,
  .button-group.is-#{$style} button,
  .button.is-#{$style} {
    @include button-style($style, $button-variant);
  }
}

// VARIANT CLASSES
// Generates classes for button variants.
// Uses default style value.
@each $variant in $button-variants {
  .button-group.is-#{$variant} a,
  .button-group.is-#{$variant} button,
  .button.is-#{$variant} {
    @include button-style($button-style, $variant);
  }
}

// STYLE & VARIANT CLASSES
// Generates classes for button styles & variants.
@each $style in $button-styles {
  @each $variant in $button-variants {
    .button-group.is-#{$variant}.is-#{$style} a,
    .button-group.is-#{$variant}.is-#{$style} button,
    .button.is-#{$variant}.is-#{$style} {
      @include button-style($style, $variant);
    }
  }
}

// SHAPE CLASSES
// Generates classes for button shapes.
// Users default size value.
@each $shape in $button-shapes {
  .button-group.is-#{$shape} a,
  .button-group.is-#{$shape} button,
  .button.is-#{$shape} {
    @include button-shape($shape, $button-size);
  }
}

// SIZE CLASSES
// Generates classes for button sizes.
// Users default size value.
@each $size, $value in $styles-input-sizes {
  .button-group.is-#{$size} a,
  .button-group.is-#{$size} button,
  .button.is-#{$size} {
    @include button-size($size);
  }
}

// SIZE & SHAPE CLASEES
@each $shape in $button-shapes {
  @each $size, $value in $styles-input-sizes {
    .button-group.is-#{$shape}.is-#{$size} a,
    .button-group.is-#{$shape}.is-#{$size} button,
    .button.is-#{$shape}.is-#{$size} {
      @include button-shape($shape, $size);
    }
  }
}

// ALIGNMENT CLASSES
// Uses default Button Size
@each $align in $button-alignments {
  .button-group.is-#{$align} a,
  .button-group.is-#{$align} button,
  .button.is-#{$align} {
    @include button-alignment($align, $button-size);
  }
}

@each $align in $button-alignments {
  @each $size, $value in $styles-input-sizes {
    .button-group.is-#{$align}.is-#{$size} a,
    .button-group.is-#{$align}.is-#{$size} button,
    .button.is-#{$align}.is-#{$size} {
      @include button-alignment($align, $size);
    }
  }
}
