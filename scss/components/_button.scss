/**
Defines the button variants to generate for.
The values are taken from $button-styles-colors
The color map must contain "hover", "default", "muted", "text" values.
*/
$button-variants: "primary", "secondary", "accent", "light", "dark", "info",
  "success", "danger", "warning";

$button-styles: "solid", "outline", "muted";

$button-shapes: "rectangle", "square", "rounded", "pill", "circle";

$button-alignments: "left", "right";

/**
BUTTON STYLE MIXINS
Each style has unique CSS rules hence requires seperate mixins.
naming convention is: button-style--<style_name>
*/
@mixin button-style--solid($variant) {
  background-color: var(--color--#{$variant});
  color: var(--text-color--#{$variant});
  path {
    fill: var(--text-color--#{$variant});
  }
  &:hover:not(:disabled) {
    background-color: var(--color--#{$variant}--hover);
  }
}

@mixin button-style--outline($variant) {
  border: $button-outline solid var(--color--#{$variant});
  background-color: transparent;
  color: var(--color--#{$variant});
  path {
    fill: var(--color--#{$variant});
  }
  &:hover:not(:disabled) {
    background-color: var(--color--#{$variant});
    color: var(--text-color--#{$variant});
    path {
      fill: var(--text-color--#{$variant});
    }
  }
}

@mixin button-style--muted($variant) {
  background-color: var(--color--#{$variant}--muted);
  color: var(--color--#{$variant});
  path {
    fill: var(--color--#{$variant});
  }
  &:hover {
    background-color: var(--color--#{$variant}--muted);
    color: var(--color--#{$variant});
  }
}

@mixin button-style($style, $variant) {
  @if $style== "solid" {
    @include button-style--solid($variant);
  } //
  @else if $style== "outline" {
    @include button-style--outline($variant);
  } //
  @else if $style== "muted" {
    @include button-style--muted($variant);
  }
}

/**
BUTTON SHAPES
*/
@mixin button-shape--rectangle {
  border-radius: 0;
}
@mixin button-shape--rounded {
  border-radius: 4px;
}
@mixin button-shape--pill($size) {
  border-radius: var(--input-size--#{$size});
}
@mixin button-shape--square($size) {
  height: var(--input-size--#{$size});
  width: var(--input-size--#{$size});
  padding: 0 !important;
  border-radius: 0;
  .button__icon {
    margin: 0;
  }
}
@mixin button-shape--circle($size) {
  height: var(--input-size--#{$size});
  width: var(--input-size--#{$size});
  padding: 0 !important;
  border-radius: 50%;
  .button__icon {
    margin: 0;
  }
}

@mixin button-shape($shape, $size) {
  @if $shape== "rectangle" {
    @include button-shape--rectangle;
  } //
  @else if $shape== "rounded" {
    @include button-shape--rounded;
  } //
  @else if $shape== "pill" {
    @include button-shape--pill($size);
  } //
  @else if $shape== "square" {
    @include button-shape--square($size);
  } //
  @else if $shape== "circle" {
    @include button-shape--circle($size);
  }
}

/**
BUTTON SIZES
Uses $styles-input-sizes map to define sizes
*/
$button-icon-size: (
  xl: 28px,
  lg: 24px,
  md: 20px,
  sm: 16px
);

@mixin button-size($size) {
  padding: 0px var(--space--#{$size});
  height: var(--input-size--#{$size});
  .button__icon {
    svg {
      height: map-get($button-icon-size, $size) !important;
      width: map-get($button-icon-size, $size) !important;
    }
  }
}

/**
Button Alignment
*/
@mixin button-alignment--left {
  padding-left: 0;
  .button__icon {
    justify-content: flex-end;
    margin-right: var(--space--xs);
  }
}
@mixin button-alignment--right {
  padding-right: 0;
  flex-direction: row-reverse;
  .button__icon {
    justify-content: flex-start;
    margin-left: var(--space--xs);
  }
}

@mixin button-alignment($alignment, $size) {
  .button__icon {
    width: --input-size($size);
  }
  @if $alignment== "left" {
    @include button-alignment--left;
  } //
  @else if $alignment== "right" {
    @include button-alignment--right;
  } //
}

/**
Default .button rules.
*/
.button,
.button-group a,
.button-group button {
  @include button--reset;
  display: flex;
  align-items: center;
  white-space: nowrap;
  font-family: var(--font--content);
  text-decoration: none;
  font-size: 14px;
  line-height: 1;
  .button__icon {
    display: flex;
    justify-content: center;
    align-items: center;
    margin-right: var(--space--xs);
  }
  &:hover {
    text-decoration: none;
  }
  &:disabled {
    cursor: not-allowed;
    opacity: 0.8;
  }
  &.is-loading {
    cursor: wait;
  }
  &.is-fluid {
    width: 100%;
  }
  @if mixin-exists(__button) {
    @include __button();
  }
  @include button-size($default-button-size);
  @include button-shape($default-button-shape, $default-button-size);
  @include button-style($default-button-style, $default-button-variant);
}

.button-group {
  display: flex;
  list-style: none;
  margin: 0;
  padding: 0;
  a {
    flex: 0 0 auto;
  }
  &.is-stacked {
    flex-direction: column;
    button,
    a {
      width: 100%;
    }
  }
}

/**
STYLE CLASSES
Generates classes for button styles.
Uses default variant value.
*/
@each $style in $button-styles {
  .button-group.is-#{$style} a,
  .button-group.is-#{$style} button,
  .button.is-#{$style} {
    @include button-style($style, $default-button-variant);
  }
}

/**
VARIANT CLASSES
Generates classes for button variants.
Uses default style value.
*/
@each $variant in $button-variants {
  .button-group.is-#{$variant} a,
  .button-group.is-#{$variant} button,
  .button.is-#{$variant} {
    @include button-style($default-button-style, $variant);
  }
}

/**
STYLE & VARIANT CLASSES
Generates classes for button styles & variants.
*/
@each $style in $button-styles {
  @each $variant in $button-variants {
    .button-group.is-#{$variant}.is-#{$style} a,
    .button-group.is-#{$variant}.is-#{$style} button,
    .button.is-#{$variant}.is-#{$style} {
      @include button-style($style, $variant);
    }
  }
}

/**
SHAPE CLASSES
Generates classes for button shapes.
Users default size value.
*/
@each $shape in $button-shapes {
  .button-group.is-#{$shape} a,
  .button-group.is-#{$shape} button,
  .button.is-#{$shape} {
    @include button-shape($shape, $default-button-size);
  }
}

/**
SIZE CLASSES
Generates classes for button sizes.
Users default size value.
*/
@each $size, $value in $styles-input-sizes {
  .button-group.is-#{$size} a,
  .button-group.is-#{$size} button,
  .button.is-#{$size} {
    @include button-size($size);
  }
}

/**
SIZE & SHAPE CLASEES
*/
@each $shape in $button-shapes {
  @each $size, $value in $styles-input-sizes {
    .button-group.is-#{$shape}.is-#{$size} a,
    .button-group.is-#{$shape}.is-#{$size} button,
    .button.is-#{$shape}.is-#{$size} {
      @include button-shape($shape, $size);
    }
  }
}

/**
ALIGNMENT CLASSES
Uses default Button Size
*/
@each $align in $button-alignments {
  .button-group.is-#{$align} a,
  .button-group.is-#{$align} button,
  .button.is-#{$align} {
    @include button-alignment($align, $default-button-size);
  }
}

@each $align in $button-alignments {
  @each $size, $value in $styles-input-sizes {
    .button-group.is-#{$align}.is-#{$size} a,
    .button-group.is-#{$align}.is-#{$size} button,
    .button.is-#{$align}.is-#{$size} {
      @include button-alignment($align, $size);
    }
  }
}
