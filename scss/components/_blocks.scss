$styles-grid-size: 12;

/**
BLOCKS
Same as bootstrap's row.
*/
@mixin blocks($breakpoint) {
  $gap: calc(-1 * var(--gap--#{$breakpoint}));
  margin-left: $gap;
  margin-right: $gap;
  > .block {
    @include block($breakpoint);
  }

  &.is-multirow {
    margin: $gap;
    > .block {
      padding: $gap;
    }
  }
}

/**
BLOCK
Same as bootstrap's col.
*/
@mixin block($breakpoint) {
  $gap: var(--gap--#{$breakpoint});
  padding-left: $gap;
  padding-right: $gap;
  @for $i from 1 through $styles-grid-size {
    $className: breakpoint-class($breakpoint, is-#{$i});
    &.#{$className} {
      flex: 0 0 (100% / $styles-grid-size) * $i;
      max-width: (100% / $styles-grid-size) * $i;
    }
  }
}

/**
BLOCKS RULES
*/
.blocks {
  display: flex;
  flex-wrap: wrap;
  > .block {
    flex-basis: 0;
    flex-grow: 1;
    max-width: 100%;
  }
  @include blocks("desktop");

  &.is-middle {
    align-items: center;
  }

  //Remove gap
  &.no-gap {
    margin: 0;
    > .block {
      padding: 0;
    }
  }

  //DEBUG MODE HIGHLIGHT
  @if ($debug) {
    border: 1px dotted red;
    .block {
      border: 1px dotted blue;
    }
  }
}

/**
MEDIA QUERY FOR BLOCKS
*/
@each $breakpoint, $value in $styles-breakpoints {
  @media only screen and (max-width: $value) {
    .blocks {
      @include blocks($breakpoint);
    }
  }
}
