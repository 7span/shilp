$styles-blocks-defaults: () !default;
$styles-blocks-defaults: map-merge(
  (
    "gaps": $styles-gaps,
    "grids": 12,
    "gap": sm
  ),
  $styles-blocks-defaults
);

$blocks-grids: map-get($styles-blocks-defaults, "grids");
$blocks-gap: map-get($styles-blocks-defaults, "gap");
$blocks-gaps: map-get($styles-blocks-defaults, "gaps");

// RESPONSIVE BLOCKS GAP
// Generates the responsive classes based on breakpoint. with all the gap values.
@mixin responsive-blocks-gap($breakpoint) {
  @each $gap, $value in $blocks-gaps {
    $className: breakpoint-class($breakpoint, g--#{$gap});
    &.#{$className} {
      @include blocks-gap($gap);
    }
  }
}

// BLOCKS GAP
@mixin blocks-gap($gap) {
  $negetive-gap: calc(-1 * #{--gap($gap)});
  margin-left: $negetive-gap;
  margin-right: $negetive-gap;
  > .block {
    padding-left: --gap($gap);
    padding-right: --gap($gap);
  }
}

// BLOCK SIZE
// Defines the block size based on breakpoint and a class name.
// I.e. .is-6 .phone--is-12
@mixin block-size($breakpoint) {
  @for $i from 1 through $blocks-grids {
    $className: breakpoint-class($breakpoint, is-#{$i});
    &.#{$className} {
      flex: 0 0 (100% / $blocks-grids) * $i;
      max-width: (100% / $blocks-grids) * $i;
    }
  }
}

// BLOCKS RULES
.blocks {
  display: flex;
  flex-wrap: wrap;
  //This will set a default gap rules.
  @include blocks-gap($blocks-gap);
  //This will add rules for desktop and diffrent sizes.
  @include responsive-blocks-gap("desktop");
  &.is-middle {
    align-items: center;
  }
}
.block {
  flex-basis: 0;
  flex-grow: 1;
  max-width: 100%;
  @include block-size("desktop");
}

// MEDIA QUERY
@each $breakpoint, $value in $styles-breakpoints {
  @media only screen and (max-width: $value) {
    .blocks {
      @include responsive-blocks-gap($breakpoint);
    }
    .block {
      @include block-size($breakpoint);
    }
  }
}
