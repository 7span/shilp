$space-directions: (
  t: "top",
  b: "bottom",
  l: "left",
  r: "right"
);

@mixin spacing($breakpoint, $initial, $property) {
  //Merge 0px and auto values to spaces.
  $spaces: map-merge(
    $shilp-spaces,
    (
      0: 0px,
      auto: auto
    )
  );

  //All Directions
  @each $space, $value in $spaces {
    $size: "";
    @if ($space== 0 or $space== auto) {
      $size: $value;
    } @else {
      $size: --space($space);
    }

    //All Directions
    $className: breakpoint-class($breakpoint, #{$initial}-#{$space});
    .#{$className} {
      #{$property}: #{$size} !important;
    }

    //Left,Right,Top,Bottom
    @each $direction-initial, $direction in $space-directions {
      $logicalProperty: map-get($shilp-logical-directions, $direction);

      $className: breakpoint-class(
        $breakpoint,
        #{$initial}#{$direction-initial}-#{$space}
      );
      .#{$className} {
        #{$property}-#{$logicalProperty}: #{$size} !important;
      }
    }

    //X & Y
    $className: breakpoint-class($breakpoint, #{$initial}x-#{$space});
    .#{$className} {
      #{$property}-inline-start: #{$size} !important;
      #{$property}-inline-end: #{$size} !important;
    }

    $className: breakpoint-class($breakpoint, #{$initial}y-#{$space});
    .#{$className} {
      #{$property}-block-start: #{$size} !important;
      #{$property}-block-end: #{$size} !important;
    }
  }
}

@include spacing("phone", "p", "padding");
@include spacing("phone", "m", "margin");

//Media Query
@each $breakpoint, $value in $shilp-breakpoints {
  @media only screen and (min-width: $value) {
    @include spacing($breakpoint, "p", "padding");
    @include spacing($breakpoint, "m", "margin");
  }
}
