$variants: "primary", "secondary", "accent", "light", "dark";
$styles: "solid", "outline";
$sizes: "xs", "sm", "md", "lg", "xl";
$shapes: "rectangle", "square", "rounded", "pill", "circle";

/*----------------------------------
NORMALIZE
Contains the default properties of button
----------------------------------*/
@mixin button-common {
  border: none;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  outline: 0;
  white-space: nowrap;
  svg {
    margin-right: var(--space--xs);
  }
  &:disabled {
    cursor: not-allowed;
    opacity: 0.8;
  }
  @if mixin-exists(__button) {
    @include __button();
  }
  &.is-loading {
    cursor: wait;
  }
}

/*----------------------------------
VARIANTS
Generates classes based on themes colors
----------------------------------*/
@mixin button-variant($variant: "primary") {
  background-color: var(--color--#{$variant});
  color: var(--text-color--#{$variant});
  svg {
    path {
      fill: var(--text-color--#{$variant});
    }
  }
  &:hover:not(:disabled) {
    background-color: var(--hover-color--#{$variant});
  }
}

/*----------------------------------
STYLES
----------------------------------*/
@mixin button-style($variant: "primary", $style: "solid") {
  border: 2px solid var(--color--#{$variant});
  background-color: transparent;
  color: var(--color--#{$variant});
  &:hover:not(:disabled) {
    background-color: var(--color--#{$variant});
    color: var(--text-color--#{$variant});
  }
}

/*----------------------------------
SIZES
----------------------------------*/
$iconSize: (
  lg: 32px,
  md: 24px,
  sm: 16px,
  xs: 16px
);

@mixin button-size($size: "md") {
  @if $size== "xs" {
    font-size: 70%;
    padding: 0px var(--space--sm);
  } @else {
    padding: 0px var(--space--#{$size});
  }
  height: var(--input-size--#{$size});
  svg {
    height: map-get($iconSize, $size) !important;
    width: map-get($iconSize, $size) !important;
  }
}

/*----------------------------------
SHAPES
----------------------------------*/
@mixin button-shape($size: "md", $shape: "rectangle") {
  @if $shape== "rounded" {
    border-radius: 4px;
  } @else if $shape== "square" {
    height: var(--input-size--#{$size});
    width: var(--input-size--#{$size});
    padding: 0;
  } @else if $shape== "circle" {
    width: var(--input-size--#{$size});
    height: var(--input-size--#{$size});
    padding: 0;
    border-radius: 50%;
  } @else if $shape== "pill" {
    border-radius: var(--input-size--#{$size});
  }
}

/*----------------------------------
GENNERATE CLASSES
----------------------------------*/
@each $variant in $variants {
  .button--#{$variant} {
    @include button-common();
    @include button-size();
    @include button-variant($variant);
    @each $style in $styles {
      &.button--#{$style} {
        @include button-style($variant, "solid");
      }
    }
  }
}

@each $shape in $shapes {
  .button--#{$shape} {
    @include button-shape("md", $shape);
    @if $shape== "circle" or $shape== "square" {
      svg {
        margin: 0;
      }
    }
  }
}

@each $size in $sizes {
  .button--#{$size} {
    @include button-size($size);
    @each $shape in $shapes {
      &.button--#{$shape} {
        @include button-shape($size, $shape);
      }
    }
  }
}
